

binding.webView.visibility = View.GONE

// Set the WebView transport
transport.webView = windowWebView
resultMsg.sendToTarget()



import android.Manifest
import android.content.pm.PackageManager
import android.os.Build
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat

class MainActivity : AppCompatActivity() {

    companion object {
        const val PERMISSION_REQUEST_CODE = 1001
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // Check for permissions
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            if (checkPermissions()) {
                // Permissions are granted, proceed with your file operations
            } else {
                requestPermissions()
            }
        } else {
            // Permissions 


import android.content.SharedPreferences
import org.junit.Before
import org.junit.Test
import org.mockito.Mockito
import org.mockito.Mockito.verify
import org.mockito.Mockito.`when`
import kotlin.test.assertFalse
import kotlin.test.assertTrue

class WhatsNewHelperTest {

    private lateinit var sharedPreferences: SharedPreferences
    private lateinit var editor: SharedPreferences.Editor
    private lateinit var whatsNewHelper: WhatsNewHelper

    @Before
    fun setUp() {
        // Mock SharedPreferences and its editor
        sharedPreferences = Mockito.mock(SharedPreferences::class.java)
        editor = Mockito.mock(SharedPreferences.Editor::class.java)
        `when`(sharedPreferences.edit()).thenReturn(editor)
        `when`(editor.putString(Mockito.anyString(), Mockito.anyString())).thenReturn(editor)

        // Initialize WhatsNewHelper with the mocked SharedPreferences
        whatsNewHelper = WhatsNewHelper(sharedPreferences)
    }

    @Test
    fun `should show What's New screen when version is new`() {
        // Given a current version that is different from the last seen version
        val currentVersion = "1.2.0"
        `when`(sharedPreferences.getString("LAST_SEEN_VERSION", "")).thenReturn("1.1.0")

        // When checking if the "What's New" screen should be shown
        val result = whatsNewHelper.shouldShowWhatsNewScreen(currentVersion)

        // Then it should return true
        assertTrue(result)
    }

    @Test
    fun `should not show What's New screen when version is the same`() {
        // Given the current version is the same as the last seen version
        val currentVersion = "1.2.0"
        `when`(sharedPreferences.getString("LAST_SEEN_VERSION", "")).thenReturn(currentVersion)

        // When checking if the "What's New" screen should be shown
        val result = whatsNewHelper.shouldShowWhatsNewScreen(currentVersion)

        // Then it should return false
        assertFalse(result)
    }

    @Test
    fun `should save the current version when dismissing the What's New screen`() {
        // Given a current version
        val currentVersion = "1.2.0"

        // When dismissing the "What's New" screen
        whatsNewHelper.dismissWhatsNewScreen(currentVersion)

        // Then verify the current version is saved in SharedPreferences
        verify(editor).putString("LAST_SEEN_VERSION", currentVersion)
        verify(editor).apply()
    }
}



