
val builder = AlertDialog.Builder(binding.webView.context)

// Set the WebView background to white (solid)
windowWebView.setBackgroundColor(Color.WHITE)

// Create the dialog and set the WebView as its content
builder.setView(windowWebView)
popupDialog = builder.create()

// Set dismiss listener on the dialog to handle cleanup
popupDialog.setOnDismissListener {
    if (windowWebView != null) {
        windowWebView.destroy()  // Destroy the WebView to free resources
        windowWebView = null
    }
}

// Ensure the dialog has a solid white background (no transparency)
popupDialog.window?.setBackgroundDrawable(ColorDrawable(Color.WHITE))

// Show the dialog
popupDialog.show()

// If needed, add the WebView to your container view
if (windowWebView.parent == null) {
    binding.container.addView(windowWebView)
}
binding.webView.visibility = View.GONE

// Set the WebView transport
transport.webView = windowWebView
resultMsg.sendToTarget()



import android.Manifest
import android.content.pm.PackageManager
import android.os.Build
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat

class MainActivity : AppCompatActivity() {

    companion object {
        const val PERMISSION_REQUEST_CODE = 1001
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // Check for permissions
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            if (checkPermissions()) {
                // Permissions are granted, proceed with your file operations
            } else {
                requestPermissions()
            }
        } else {
            // Permissions are granted, proceed with your file operations
        }
    }

    private fun checkPermissions(): Boolean {
        val readPermission = ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE)
        val writePermission = ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE)
        return readPermission == PackageManager.PERMISSION_GRANTED && writePermission == PackageManager.PERMISSION_GRANTED
    }

    private fun requestPermissions() {
        ActivityCompat.requestPermissions(
            this,
            arrayOf(Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE),
            PERMISSION_REQUEST_CODE
        )
    }

    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == PERMISSION_REQUEST_CODE) {
            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                // Permissions granted, proceed with your file operations
            } else {
                // Permissions denied, show a message to the user
            }
        }
    }
}
