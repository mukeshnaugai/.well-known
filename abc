import android.content.Context
import android.content.SharedPreferences
import androidx.arch.core.executor.testing.InstantTaskExecutorRule
import io.mockk.*
import org.junit.Assert.*
import org.junit.Before
import org.junit.Rule
import org.junit.Test

class HomeActivityViewModelTest {

    @get:Rule
    val rule = InstantTaskExecutorRule() // For LiveData testing

    private lateinit var viewModel: HomeActivityViewModel
    private lateinit var context: Context
    private lateinit var sharedPreferences: SharedPreferences
    private lateinit var editor: SharedPreferences.Editor

    @Before
    fun setUp() {
        context = mockk()
        sharedPreferences = mockk()
        editor = mockk()

        every { context.getSharedPreferences(any(), any()) } returns sharedPreferences
        every { sharedPreferences.getString(any(), any()) } returns null
        every { sharedPreferences.edit() } returns editor
        every { editor.putString(any(), any()) } returns editor
        every { editor.apply() } just runs

        viewModel = HomeActivityViewModel(context)
    }

    @Test
    fun `isAppUpdated returns true when version is updated`() {
        // Mock version behavior
        every { sharedPreferences.getString("VERSION_NAME", "0.0") } returns "1.0"
        mockkStatic(BuildConfig::class)
        every { BuildConfig.VERSION_NAME } returns "2.0"

        val result = viewModel.isAppUpdated(context)

        assertTrue(result)
        verify { editor.putString("VERSION_NAME", "2.0") }
    }

    @Test
    fun `isAppUpdated returns false when version is not updated`() {
        // Mock version behavior
        every { sharedPreferences.getString("VERSION_NAME", "0.0") } returns "2.0"
        mockkStatic(BuildConfig::class)
        every { BuildConfig.VERSION_NAME } returns "2.0"

        val result = viewModel.isAppUpdated(context)

        assertFalse(result)
    }

    @Test
    fun `isNewMajorVersion returns true when major version is updated`() {
        val result = viewModel.isNewMajorVersion("1.0", "2.0")
        assertTrue(result)
    }

    @Test
    fun `isNewMajorVersion returns false when version is same`() {
        val result = viewModel.isNewMajorVersion("1.0", "1.0")
        assertFalse(result)
    }
}



