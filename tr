kimport android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.unit.sp
import androidx.window.layout.WindowMetricsCalculator
import androidx.window.layout.WindowSizeClass
import androidx.window.layout.WindowWidthSizeClass

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // Get the current window metrics to calculate size class
        val windowMetrics = WindowMetricsCalculator.getOrCreate()
            .computeCurrentWindowMetrics(this)
        val windowSizeClass = WindowSizeClass.calculateFromSize(
            width = windowMetrics.bounds.width(),
            height = windowMetrics.bounds.height()
        )

        setContent {
            ResponsiveText(windowSizeClass)
        }
    }
}

@Composable
fun ResponsiveText(windowSizeClass: WindowSizeClass) {
    val fontSize = when (windowSizeClass.widthSizeClass) {
        WindowWidthSizeClass.Compact -> 16.sp  // Small text for phones
        WindowWidthSizeClass.Medium -> 20.sp   // Medium text for small tablets
        WindowWidthSizeClass.Expanded -> 24.sp // Large text for large tablets/desktops
        else -> 16.sp                          // Default text size
    }

    Box(modifier = Modifier.fillMaxSize()) {
        Text(
            text = "Responsive Text Example",
            style = TextStyle(
                fontSize = fontSize,
                color = MaterialTheme.colorScheme.onBackground
            )
        )
    }
}

@Throws(IOException::class)
private fun convertBase64StringToPdfAndStoreIt(base64Pdf: String, webURL: String) {
    // Determine the file name and folder location
    val fileName = if (webURL.contains(context.getString(R.string.beneficiary_change))) {
        "glic_customer_doc.pdf"
    } else {
        "glic_customer_doc_temp.pdf"
    }

    val downloadDir: File = File(
        if (webURL.contains(context.getString(R.string.beneficiary_change))) {
            Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS)
        } else {
            context.cacheDir
        },
        fileName
    )

    // Handle duplicate files by appending an index to the file name
    var uniqueFile = downloadDir
    var fileIndex = 1
    while (uniqueFile.exists()) {
        uniqueFile = File(
            uniqueFile.parent,
            "${fileName.substringBeforeLast(".")}_$fileIndex.${fileName.substringAfterLast(".")}"
        )
        fileIndex++
    }

    // Decode Base64 string and write it to the file
    val pdfAsBytes = Base64.decode(
        base64Pdf.replaceFirst("data:.*;base64,".toRegex(), ""),
        Base64.DEFAULT
    )

    uniqueFile.outputStream().use { os ->
        os.write(pdfAsBytes)
        os.flush()
    }

    // Notify user and handle further actions
    if (uniqueFile.exists()) {
        if (webURL.contains(context.getString(R.string.beneficiary_change))) {
            Toast.makeText(context, "Downloaded Successfully...", Toast.LENGTH_LONG).show()
        } else {
            openRemotePDFScreen(uniqueFile)
        }
    }
}
