[{
  "relation": ["delegate_permission/common.handle_all_urls"],
  "target": {
    "namespace": "android_app",
    "package_name": "com.example.testapp",
    "sha256_cert_fingerprints":
    ["86:11:1A:D0:6B:57:B0:AA:65:9C:50:62:C1:80:72:DB:94:18:01:AC:36:6C:70:01:A3:5B:3B:9B:77:B2:7F:21"]
  }
}]

If you’d like to open a PDF file from the Downloads folder directly in your Android app using an embedded library, AndroidPdfViewer by Barteksc is a popular choice. It’s lightweight, easy to use, and requires minimal setup to display PDFs within your app. Here’s a complete guide for using this library:

Step 1: Add the AndroidPdfViewer Library

In your build.gradle file, add the dependency for AndroidPdfViewer:

implementation 'com.github.barteksc:android-pdf-viewer:3.2.0-beta.1'

Step 2: Request Storage Permissions

Since the PDF is in the Downloads folder, ensure you have permissions to read from external storage, especially for Android 6.0 (API level 23) and above.

In AndroidManifest.xml:

<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>

Request Permission at Runtime:

if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
    ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_CODE);
}

Step 3: Load the PDF from the Downloads Folder

Use the PDFView widget provided by AndroidPdfViewer to display the PDF.

Create the Layout XML

In your activity_main.xml, add a PDFView to display the PDF:

<com.github.barteksc.pdfviewer.PDFView
    android:id="@+id/pdfView"
    android:layout_width="match_parent"
    android:layout_height="match_parent" />

Open the PDF in MainActivity

In your MainActivity, find the PDF file in the Downloads folder, then load it into the PDFView.

import android.os.Bundle;
import android.os.Environment;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;

import com.github.barteksc.pdfviewer.PDFView;

import java.io.File;

public class MainActivity extends AppCompatActivity {

    private PDFView pdfView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        pdfView = findViewById(R.id.pdfView);

        // Locate the PDF file in the Downloads folder
        File downloadsFolder = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS);
        File pdfFile = new File(downloadsFolder, "yourfile.pdf");  // Replace with the actual file name

        if (pdfFile.exists()) {
            // Load the PDF file in the PDFView
            pdfView.fromFile(pdfFile)
                   .enableSwipe(true)        // Allows swiping to change pages
                   .swipeHorizontal(false)   // Sets the swiping direction
                   .enableDoubletap(true)    // Enables double-tap to zoom
                   .load();
        } else {
            Toast.makeText(this, "PDF file not found", Toast.LENGTH_SHORT).show();
        }
    }
}

Additional PDFView Options

AndroidPdfViewer provides multiple configuration options for enhanced control:

	•	Enable Zoom:

pdfView.fromFile(pdfFile)
       .enableSwipe(true)
       .enableDoubletap(true)    // Allows zooming with a double-tap
       .enableAnnotationRendering(true)  // Renders annotations
       .spacing(10)              // Adds spacing between pages in dp
       .load();


	•	Password Protection: If your PDF file is password-protected, you can load it as follows:

pdfView.fromFile(pdfFile)
       .password("your_password")  // Set the PDF password here
       .load();



Handling Permissions

Make sure to handle the permission result for reading external storage:

@Override
public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
    if (requestCode == REQUEST_CODE && grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
        // Permission granted, load the PDF
        loadPdf();
    } else {
        Toast.makeText(this, "Permission denied to read PDF file", Toast.LENGTH_SHORT).show();
    }
}

Summary

With AndroidPdfViewer, you can display PDFs from the Downloads folder within your Android app quickly. The library supports zoom, swipe navigation, password protection, and more, making it a versatile choice for PDF rendering.