Using Hilt with SharedPreferences in a ViewModel involves injecting SharedPreferences into your ViewModel using Hilt’s dependency injection system. Here’s a step-by-step guide:

Step 1: Add Hilt Dependency

Ensure that your project includes Hilt dependencies in the build.gradle file:

// In app-level build.gradle
dependencies {
    implementation 'com.google.dagger:hilt-android:2.48'
    kapt 'com.google.dagger:hilt-android-compiler:2.48'

    // For ViewModel
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha03"
    kapt "androidx.hilt:hilt-compiler:1.0.0"
}

Step 2: Create a Hilt Module for SharedPreferences

Define a module that provides the SharedPreferences instance.

@Module
@InstallIn(SingletonComponent::class)
object SharedPreferencesModule {

    @Provides
    @Singleton
    fun provideSharedPreferences(@ApplicationContext context: Context): SharedPreferences {
        return context.getSharedPreferences("app_prefs", Context.MODE_PRIVATE)
    }
}

Step 3: Inject SharedPreferences into ViewModel

You can inject SharedPreferences into your ViewModel using Hilt.
	1.	Annotate the ViewModel with @HiltViewModel.
	2.	Use constructor injection to inject SharedPreferences.

@HiltViewModel
class MyViewModel @Inject constructor(
    private val sharedPreferences: SharedPreferences
) : ViewModel() {

    fun saveData(key: String, value: String) {
        sharedPreferences.edit().putString(key, value).apply()
    }

    fun getData(key: String): String? {
        return sharedPreferences.getString(key, null)
    }
}

Step 4: Set Up Hilt in Application Class

Annotate your Application class with @HiltAndroidApp.

@HiltAndroidApp
class MyApplication : Application()

Step 5: Use ViewModel in Activity or Fragment

Now you can use the ViewModel in your Activity or Fragment:

@AndroidEntryPoint
class MainActivity : AppCompatActivity() {

    private val viewModel: MyViewModel by viewModels()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // Example usage
        viewModel.saveData("username", "JohnDoe")
        val username = viewModel.getData("username")
        println("Username: $username")
    }
}

Notes:
	•	Use apply() for asynchronous writes and commit() for synchronous writes.
	•	Consider using DataStore for more robust and modern data storage if you don’t specifically need SharedPreferences.

Let me know if you need further assistance!